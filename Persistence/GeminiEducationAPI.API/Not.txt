Bu katman, kullanıcı arayüzüne en yakın katmandır ve API'nin dış dünyaya açılan kapısıdır.
İçerebilecekler:
Controllers (Denetleyiciler)
Action Results (Eylem Sonuçları)
Filters (Filtreler)
Middleware (Ara Yazılımlar)
Routing (Yönlendirme)
Bağımlılıkları:
ECommerceAPI.Application

====================================================================================================
Yapılandırılmış Loglama Nedir?

Yapılandırılmış loglama, log mesajlarını sadece metin olarak değil, anahtar-değer çiftleri içeren bir formatta (genellikle JSON) kaydetme yöntemidir. Bu, logları analiz etmeyi ve filtrelemeyi çok daha kolay hale getirir.

Neden Serilog ve Seq Kullanıyoruz?

Serilog: .NET için popüler ve esnek bir yapılandırılmış loglama kütüphanesidir. Farklı hedeflere (sink) log yazmayı destekler.
Seq: Yapılandırılmış logları toplamak, görüntülemek ve analiz etmek için kullanılan bir log sunucusudur. Kullanıcı dostu arayüzü ve güçlü arama/filtreleme özellikleri ile öne çıkar.
Yapacağımız İşlemler:

Serilog ve gerekli sink'leri (bu örnekte Seq) projemize ekleyeceğiz.
Serilog'u Program.cs dosyasında yapılandıracağız.
Uygulamamızda loglama yapacağız.
Seq'i kurup çalıştıracağız ve logları görüntüleyeceğiz.

====================================================================================================


Adım 14: SignalR ile Real-Time Haberleşme

Bu adımda, uygulamamıza SignalR kütüphanesini kullanarak gerçek zamanlı (real-time) iletişim yetenekleri ekleyeceğiz.

SignalR Nedir?

SignalR, ASP.NET Core uygulamalarına gerçek zamanlı web işlevselliği eklemeyi kolaylaştıran bir kütüphanedir. Sunucu tarafındaki kodun istemcilere anında içerik göndermesine (push) olanak tanır.

Ne İçin Kullanacağız?

Bu örnekte, yeni bir ürün eklendiğinde, diğer bağlı istemcilerin (örneğin, web tarayıcılarının) anında bilgilendirilmesi için SignalR'ı kullanacağız. Bu sayede,